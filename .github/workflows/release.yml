name: Release and Build

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build and release"
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Run type check
        run: yarn tsc --noEmit

      - name: Build application
        run: yarn build

  build:
    needs: test
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-22.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest-amd64: ${{ steps.build-amd64.outputs.digest }}
      image-digest-arm64: ${{ steps.build-arm64.outputs.digest }}
      metadata: ${{ steps.meta.outputs.json }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Prepare platform-specific tags (AMD64)
        if: matrix.platform == 'linux/amd64'
        id: tags-amd64
        run: |
          TAGS_JSON='${{ steps.meta.outputs.json }}'
          TAGS=$(echo "$TAGS_JSON" | jq -r '.tags[]')
          PLATFORM_TAGS=""
          for tag in $TAGS; do
            if [ -z "$PLATFORM_TAGS" ]; then
              PLATFORM_TAGS="$tag-amd64"
            else
              PLATFORM_TAGS="$PLATFORM_TAGS,$tag-amd64"
            fi
          done
          echo "tags=$PLATFORM_TAGS" >> $GITHUB_OUTPUT

      - name: Prepare platform-specific tags (ARM64)
        if: matrix.platform == 'linux/arm64'
        id: tags-arm64
        run: |
          TAGS_JSON='${{ steps.meta.outputs.json }}'
          TAGS=$(echo "$TAGS_JSON" | jq -r '.tags[]')
          PLATFORM_TAGS=""
          for tag in $TAGS; do
            if [ -z "$PLATFORM_TAGS" ]; then
              PLATFORM_TAGS="$tag-arm64"
            else
              PLATFORM_TAGS="$PLATFORM_TAGS,$tag-arm64"
            fi
          done
          echo "tags=$PLATFORM_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (AMD64)
        if: matrix.platform == 'linux/amd64'
        id: build-amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.tags-amd64.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

      - name: Build and push Docker image (ARM64)
        if: matrix.platform == 'linux/arm64'
        id: build-arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.tags-arm64.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

  consolidate:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create and push multi-arch manifest
        run: |
          # Get the tags from metadata and convert to array
          TAGS_JSON='${{ steps.meta.outputs.json }}'
          TAGS=$(echo "$TAGS_JSON" | jq -r '.tags[]')

          # Create multi-arch manifests for each tag
          for tag in $TAGS; do
            echo "Creating manifest for $tag"
            echo "Using platform images: $tag-amd64, $tag-arm64"
            docker buildx imagetools create \
              --tag "$tag" \
              "$tag-amd64" \
              "$tag-arm64"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          make_latest: true
